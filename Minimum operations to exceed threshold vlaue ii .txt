3066. Minimum Operations to Exceed Threshold Value II

You are given a 0-indexed integer array nums, and an integer k.
In one operation, you will:
Take the two smallest integers x and y in nums.
Remove x and y from nums.
Add min(x, y) * 2 + max(x, y) anywhere in the array.
Note that you can only apply the described operation if nums contains at least two elements.
Return the minimum number of operations needed so that all elements of the array are greater than or equal to k.

Example 1:
Input: nums = [2,11,10,1,3], k = 10
Output: 2
Explanation: In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].
In the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].
At this stage, all the elements of nums are greater than or equal to 10 so we can stop.
It can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.

Example 2:
Input: nums = [1,1,2,4,9], k = 20
Output: 4
Explanation: After one operation, nums becomes equal to [2, 4, 9, 3].
After two operations, nums becomes equal to [7, 4, 9].
After three operations, nums becomes equal to [15, 9].
After four operations, nums becomes equal to [33].
At this stage, all the elements of nums are greater than 20 so we can stop.
It can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.


MY APPROACH:
as by reading the problem statement i came to know that here we need to use priority queue as it is asking for 2 min elements and performin operations on it 
evry time this is being done so here i have minheap as in minheap the smallest elemnt always at the top so it will be a best suitable data structure.

CODE:

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        //usiing priority queue..
        priority_queue<long long int, vector<long long int>, greater<long long int>>pq;

        int n=nums.size(), count=0;
        for(int i=0; i<n; i++)
         pq.push(nums[i]);

        while(pq.size()>1) // as it is given that minimum 2 elements require to be to perform the operation..
        {
            long long int x=pq.top();
            pq.pop();
            long long int y=pq.top();
            pq.pop();

           if(x>=k) // it is given that if topmost element became >= k then stop the process...
            break;
           else
           {
               long long int sum=min(x,y)*2 + max(x,y); //it might go beyon the limit of the int that's why we use long long int...
               count++;
               pq.push(sum);
           }    
             
        } 

        return count;
    }
};
 