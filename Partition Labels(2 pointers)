763. Partition Labels

http://leetcode.com/problems/partition-labels/description/?envType=daily-question&envId=2025-03-30

You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. 
For example, the string "ababcc" can be partitioned into ["abab", "cc"], but partitions such as ["aba", "bcc"] or ["ab", "ab", "cc"] are invalid.

Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
Return a list of integers representing the size of these parts.

Example 1:
Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

Example 2:
Input: s = "eccbbbbdec"
Output: [10]
 
Constraints:

1 <= s.length <= 500
s consists of lowercase English letters.

APPROACH:
the approach is like first we will calculate the last index of evry char then we will use the 2 pointer approach .
first create a map or use 26 sized array to store the char with their indexes and then take 2 variables i=0, j=0, end=mp[s[j]], and traverse the array and calcualte 
end by taking max(end, mp[s[j]]) and then after that if j==end then enter the size of the string in the res array the size will be calculated by j-i+1, and move i=j+1 
and after that increment the j.

CODE:
class Solution {
public:
    vector<int> partitionLabels(string s) {
        
        unordered_map<char, int>mp;
        
        int n=s.size();
        for(int i=0; i<n; i++)
        {
           mp[s[i]]=i;
        }

        int i=0, j=0;
        int end=mp[s[j]];
       
       vector<int>res;
        while(j<n)
        {
            end = max(end, mp[s[j]]);
           if(j==end)
           {
             res.push_back(j-i+1);
             i=j+1;
           }

            
            j++;
        }

        return res;
    }
};
