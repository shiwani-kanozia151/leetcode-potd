1128. Number of Equivalent Domino Pairs

Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is,
one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1

Example 2:
Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3
 

Constraints:

1 <= dominoes.length <= 4 * 10^4
dominoes[i].length == 2
1 <= dominoes[i][j] <= 9

APPROACH 1: BRUTE FORCE TC-O(n^2) 
Here basically running nested loops and doing as it is given in the problem statement. 

CODE:
int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        
        int count=0;
        int n=dominoes.size();

        for(int i=0; i<n; i++)
        {
            int a = dominoes[i][0];
            int b = dominoes[i][1];

            for(int j=i+1; j<n; j++)
            {
                int c = dominoes[j][0];
                int d = dominoes[j][1];

                if((a==c && b==d) || (a==d && b==c))
                 count++; 
            }
        } 
        
        return count;

    }
 
APPROACH 2: Tuple Representation + Counting    TC:O(N) 
So we might as well directly convert each binary pair into the specified format, that is, the first dimension must not be greater than the second dimension.
Two pairs are equivalent if they contain the same two numbers, regardless of order.
Noticing that the elements in the pairs are all not greater than 9, we can concatenate each binary pair into a two-digit positive integer, i.e., (x,y)â†’10x+y. 
In this way, there is no need to use a hash table to count the number of elements, but we can directly use an array of length 100.

CODE:
int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        vector<int> num(100);
        int ret = 0;
        for (auto& it : dominoes) {
            int val = it[0] < it[1] ? it[0] * 10 + it[1] : it[1] * 10 + it[0];
            ret += num[val];
            num[val]++;
        }
        return ret;
    }
};
