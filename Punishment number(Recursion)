2698. Find the Punishment Number of an Integer

Given a positive integer n, return the punishment number of n.
The punishment number of n is defined as the sum of the squares of all integers i such that:
1 <= i <= n
The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.

Example 1:
Input: n = 10
Output: 182
Explanation: There are exactly 3 integers i in the range [1, 10] that satisfy the conditions in the statement:
- 1 since 1 * 1 = 1
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 and 1 with a sum equal to 8 + 1 == 9.
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 and 0 with a sum equal to 10 + 0 == 10.
Hence, the punishment number of 10 is 1 + 81 + 100 = 182

Example 2:
Input: n = 37
Output: 1478
Explanation: There are exactly 4 integers i in the range [1, 37] that satisfy the conditions in the statement:
- 1 since 1 * 1 = 1. 
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. 
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. 
- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.
Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478
 

Constraints:

1 <= n <= 1000


//Approach-1 : (Recursion + Memoization)
//T.C : O(n * 2^(log10(n^2)))
//S.C : O(n * log10(n^2))
class Solution {
public:
    bool check(int i, int currsum, string s, int num, vector<vector<int>>& t) {
        if (i == s.length()) {
            return currsum == num;
        }
        if (currsum > num) 
            return false;

        if (t[i][currsum] != -1) //we have repeating subproblems. Draw tree diagram of "1296"
            return t[i][currsum];

        bool possible = false;
        for (int j = i; j < s.length(); j++) {
            string currentString = s.substr(i, j - i + 1);
            int addend = stoi(currentString);

            possible = possible || check(j + 1, currsum + addend, s, num, t);
            if (possible == true) 
                return true;
        }

        return t[i][currsum] = possible;
    }

    int punishmentNumber(int n) {
        int punishmentNum = 0;
        for (int num = 1; num <= n; num++) {
            int squareNum = num * num;
            string s = to_string(squareNum);

            vector<vector<int>> t(s.size(), vector<int>(num + 1, -1));

            if (check(0, 0, s, num, t)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
};


//Approach-2 : (Recursion + Memoization)
//T.C : O(n * 2^(log10(n^2)))
//S.C : O(log10(n^2))
class Solution {
public:
    bool check(int num, int currnum, int target) {
        if(num == 0) {
            return currnum == target;
        }
        
        return check(num / 10, currnum + num % 10, target) ||
               check(num / 100, currnum + num % 100, target) ||
               check(num / 1000, currnum + num % 1000, target) ||
               check(num / 10000, currnum + num % 10000, target);
    }

    int punishmentNumber(int n) {
        int punishmentNum = 0;
        for (int currentNum = 1; currentNum <= n; currentNum++) {
            int squareNum = currentNum * currentNum;
            if (check(squareNum, 0, currentNum)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
};


/************************************************************ Java ************************************************/
// Approach-1 : (Recursion + Memoization)
// T.C : O(n * 2^(log10(n^2)))
// S.C : O(n * log10(n^2))
class Solution {
    public boolean check(int i, int currsum, String s, int num, int[][] t) {
        if (i == s.length()) {
            return currsum == num;
        }
        if (currsum > num) 
            return false;
        
        if (t[i][currsum] != -1) // we have repeating subproblems. Draw tree diagram of "1296"
            return t[i][currsum] == 1;
        
        boolean possible = false;
        for (int j = i; j < s.length(); j++) {
            String currentString = s.substring(i, j + 1);
            int addend = Integer.parseInt(currentString);
            
            possible = possible || check(j + 1, currsum + addend, s, num, t);
            if (possible) 
                return t[i][currsum] = 1;
        }
        
        return t[i][currsum] = 0;
    }

    public int punishmentNumber(int n) {
        int punishmentNum = 0;
        for (int num = 1; num <= n; num++) {
            int squareNum = num * num;
            String s = Integer.toString(squareNum);
            
            int[][] t = new int[s.length()][num + 1];
            for (int[] row : t) {
                java.util.Arrays.fill(row, -1);
            }
            
            if (check(0, 0, s, num, t)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
}

// Approach-2 : (Recursion + Memoization)
// T.C : O(n * 2^(log10(n^2)))
// S.C : O(log10(n^2))
class Solution {
    public boolean check(int num, int currnum, int target) {
        if (num == 0) {
            return currnum == target;
        }
        
        return check(num / 10, currnum + num % 10, target) ||
               check(num / 100, currnum + num % 100, target) ||
               check(num / 1000, currnum + num % 1000, target) ||
               check(num / 10000, currnum + num % 10000, target);
    }

    public int punishmentNumber(int n) {
        int punishmentNum = 0;
        for (int currentNum = 1; currentNum <= n; currentNum++) {
            int squareNum = currentNum * currentNum;
            if (check(squareNum, 0, currentNum)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
}
