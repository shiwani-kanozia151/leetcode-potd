2523. Closest Prime Numbers in Range

https://leetcode.com/problems/closest-prime-numbers-in-range/description/?envType=daily-question&envId=2025-03-07

Given two positive integers left and right, find the two integers num1 and num2 such that:
left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].

Example 1:
Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.

Example 2:
Input: left = 4, right = 6
Output: [-1,-1]
Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.
 
Constraints:
1 <= left <= right <= 10^6

APPROACH:
The approach to solve this problem is simple but for that we know about SIEVE OF EROTHENESES with the help of this algo its easy to find the prime numbers in a range 

SIEVE OF ROTHESENES
vector<bool>isprime(n+1, true)
for(int i=2; i*i<=n; i++)
{
     if(isprime[i]==true)
     {  
         for(int j=2; j*i<=n; j++)
         {   
            isprime[j]=false;
         }
     }
 }


for solving this problem also we need to find the prime numbers in a range. and then simply we will find the difference ebtween them and as soon as we will get leaast diff
we will get the ans..


CODE:

class Solution {
public:
    vector<bool> sieveHelper(int right) {
        vector<bool> isPrime(right+1, true);

        isPrime[0] = false;
        isPrime[1] = false;

        for(int i = 2; i*i <= right; i++) {
            if(isPrime[i] == true) {
                for(int j = 2; i*j <= right; j++) {
                    isPrime[i*j] = false;
                }
            }
        }

        return isPrime;
    }


    vector<int> closestPrimes(int left, int right) {
        vector<bool> isPrime = sieveHelper(right);

        vector<int> primes;
        for(int num = left; num <= right; num++) {
            if(isPrime[num] == true) {
                primes.push_back(num);
            }
        }

        int minDiff = INT_MAX;
        vector<int> result = {-1, -1};

        for(int i = 1; i < primes.size(); i++) {
            int diff = primes[i] - primes[i-1];

            if(diff < minDiff) {
                minDiff = diff;
                result = {primes[i-1], primes[i]};
            }
        }

        return result;
    }
};

