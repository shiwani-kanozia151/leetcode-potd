976. Largest Perimeter Triangle

Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.

 

Example 1:

Input: nums = [2,1,2]
Output: 5
Explanation: You can form a triangle with three side lengths: 1, 2, and 2.
Example 2:

Input: nums = [1,2,1,10]
Output: 0
Explanation: 
You cannot use the side lengths 1, 1, and 2 to form a triangle.
You cannot use the side lengths 1, 1, and 10 to form a triangle.
You cannot use the side lengths 1, 2, and 10 to form a triangle.
As we cannot use any three side lengths to form a triangle of non-zero area, we return 0.
 

Constraints:

3 <= nums.length <= 10^4
1 <= nums[i] <= 10^6

Approach1: 

TRIANGLE PROPERTY  ===  SUM OF 2 SIDES > THIRD SIDE 
i thought like first to sort all the array elements and traverse it from the starting but with this approach i am facing some problems like if the curr two elements are less than the last it may be the case that 
the current two elements sum may be greter than the second last element.

The best approach is first sort the array and start traversing from the last and keep checking like the curr element is less than the prev 2 elements ..

CODE: 
class Solution {
public:
    int largestPerimeter(vector<int>& nums) {
        
         sort(nums.begin(), nums.end());
         
         int n=nums.size();
            // Start from the largest side
        for (int i = n - 1; i >= 2; i--) {
            if (nums[i-2] + nums[i-1] > nums[i]) {
                // Valid triangle found
                return nums[i-2] + nums[i-1] + nums[i];
            }
        }
        return 0;
    }
};

TC: - O(nlog n) 
SC: - O(1) 
