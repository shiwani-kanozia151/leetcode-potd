1415. The k-th Lexicographical String of All Happy Strings of Length n

A happy string is a string that:
consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.
Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.
Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

Example 1:
Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".

Example 2:
Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.

Example 3:
Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"
 

Constraints:

1 <= n <= 10
1 <= k <= 100


APPROACH: 
Try make a tree diagram first start with empty string then take a as start then b as start then c as start now explore through a, like take ab then aba then ac then aca
like that explore all the paths..

CODE:

class Solution {
public:
    void solve(vector<string>&res, string &curr, int n)
    {
        if(curr.size()==n)
        {
            res.push_back(curr);
            return;
        }

        for(char ch='a'; ch<='c'; ch++)
        {
            if(!curr.empty() && ch==curr.back())
             continue;

             //do...
             curr.push_back(ch);

             //explore...
             solve(res, curr, n);

             //undo...
             curr.pop_back();
        }
    }
    string getHappyString(int n, int k) {
        vector<string>res;
        string curr="";
        solve(res, curr, n);

        if(k>res.size())
         return "";

        return res[k-1]; 
    }
};
