3169. Count Days Without Meetings

https://leetcode.com/problems/count-days-without-meetings/description/?envType=daily-question&envId=2025-03-24

You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1).
You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive).
Return the count of days when the employee is available for work but no meetings are scheduled.
Note: The meetings may overlap.

Example 1:
Input: days = 10, meetings = [[5,7],[1,3],[9,10]]
Output: 2
Explanation:
There is no meeting scheduled on the 4th and 8th days.

Example 2:
Input: days = 5, meetings = [[2,4],[1,3]]
Output: 1
Explanation:
There is no meeting scheduled on the 5th day.

Example 3:
Input: days = 6, meetings = [[1,6]]
Output: 0
Explanation:
Meetings are scheduled for all working days.

Constraints:

1 <= days <= 10^9
1 <= meetings.length <= 10^5
meetings[i].length == 2
1 <= meetings[i][0] <= meetings[i][1] <= days

APPROACH:
to solve problems which contains intervsls like things for that always first sort the intervals sometimes it is required to sort them according to the ending time and 
sometime it will work well if we sort them using the starting time itself. 
so here in this problem we have to return the number of days there will be no meeting and there is overlapping days too so firstly i sort the array based on the starting 
time and then run a loop to traverse the array and for the initial end time take it 0 and while traversing the array if the start time is greater than the end time then 
we will find the no. of offdays = start-end-1; and update the end as max(end, meetings[i][1]);  and after traversing whole array if the end is less than the no. of days 
given then add in result the difference between days-end;



CODE:
class Solution {
public:
    int countDays(int days, vector<vector<int>>& meetings) {
        
        int n=meetings.size();

        sort(meetings.begin(), meetings.end());

         int result=0;
         int end=0;

         for(int i=0; i<n; i++)
         {
            int start=meetings[i][0];

            int offdays=0;
            if(start>end)
               offdays = start-end-1;

             result += offdays;

             end=max(end, meetings[i][1]);
         }

         if(end<days)
          result += days-end;

         return result; 
    }
};
