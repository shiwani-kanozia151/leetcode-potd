1399. Count Largest Group

You are given an integer n.
Each number from 1 to n is grouped according to the sum of its digits.
Return the number of groups that have the largest size.

Example 1:
Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].
There are 4 groups with largest size.

Example 2:
Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.
 

Constraints:

1 <= n <= 10^4

APPRAOCH:
Do as in the problem is given and use hashmap to store the count of the sum and keep of taking track and the maxsize count.. and for finding the sum of digits by using 
while loop.

CODE:
class Solution {
public:
    int findSum(int num)
    {
         int total=0;

         while(num>0)
         {
            total += num%10;
            num=num/10;
         }

         return total;
    }
    int countLargestGroup(int n) {
       int maxsize=0;
       int count=0;
       unordered_map<int, int>mp;

       for(int i=1; i<=n; i++)
       {
           int sum=findSum(i);
           mp[sum]++; 
           if(mp[sum]==maxsize)
              count++;
            else if(mp[sum]>maxsize)
            {
               maxsize=mp[sum];
               count=1;
            }  
       }

       return count;

    }
};
