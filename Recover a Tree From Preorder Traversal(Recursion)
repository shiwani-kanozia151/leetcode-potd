1028. Recover a Tree From Preorder Traversal

https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/description/?envType=daily-question&envId=2025-02-22

We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.

 

Example 1:
Input: traversal = "1-2--3--4-5--6--7"
Output: [1,2,5,3,4,6,7]

Example 2:
Input: traversal = "1-2--3---4-5--6---7"
Output: [1,2,5,3,null,6,null,4,null,7]

Example 3:
Input: traversal = "1-401--349---90--88"
Output: [1,401,null,349,88,90]
 
Constraints:

The number of nodes in the original tree is in the range [1, 1000].
1 <= Node.val <= 10^9

APPROACH:

Basically i didnt have any idea how to proceed with this problem so i took help from video of code story with mik. 
with the help of that video i came to know that the problem is totally based on the recursion and simulation problem u just need to keep track of depth and dashes


CODE:

class Solution {
public:
    TreeNode* solve(string s, int &i, int depth)
    {
        if(i>=s.size())
         return NULL;

        int j=i;

        while(j<s.size() && s[j]=='-')  j++;

        int dash=j-i;

        if(depth != dash)
         return NULL;

        i=j; 

        int num = 0;
        while(i<s.size() && isdigit(s[i]))
        {
            num = (num * 10) + (s[i]-'0');
            i++;
        } 
           

        TreeNode* root=new TreeNode(num);

        root->left=solve(s, i, depth+1);
        root->right=solve(s, i, depth+1);

        return root; 
    }
    TreeNode* recoverFromPreorder(string traversal) {
        
        int i=0;
        return solve(traversal, i, 0);
    }
};
