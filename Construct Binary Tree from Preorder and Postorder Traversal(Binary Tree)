889. Construct Binary Tree from Preorder and Postorder Traversal

https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/description/?envType=daily-question&envId=2025-02-23

Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.
If there exist multiple answers, you can return any of them.

Example 1:
Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]

Example 2:
Input: preorder = [1], postorder = [1]
Output: [1]
 
Constraints:

1 <= preorder.length <= 30
1 <= preorder[i] <= preorder.length
All the values of preorder are unique.
postorder.length == preorder.length
1 <= postorder[i] <= postorder.length
All the values of postorder are unique.
It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.

APPROACH:

as the problem was totally new to me i have no idea how to proceed with this problem so i watched it from code story with mik
i. before doing these traversal problems have knowledge how these traversals are working.. like for postorder L, R, Root  for preorder Root, L, R...
ii. totally recursion based so have knowledge of recursion
iii. first traverse in the preordr find the root and with that root find it in the postorder and while moving in the postorder when we get that node then the left part
     from this is totally having right and left subtree.. like that ..as in postorder first left then right then root thats why

Problem Solution Theory..
i. call a recursive function solve(0, 0, n-1, pre, pos)
ii. in the recursive function prestart->0, poststart->0, preend->n-1;
iii. the base case prestart>preend --> return NULL..
                   if(prestart==preend) ---> return root...  ------->only single node is there...
iv. searching for the next root node in the postorder array 
v.  finding the number of elements to be part of the left subtree.. -----------> j-poststart+1;
vi. now call for left suntree and then for right subtree and at last return the root..

TC: O(N^2)
SC: O(N)


******************** OPTIMIZATION ... ****************************************************
WHILE SEARCHING FOR NEXTROOTNODE IN THE POSTARRAY PREVIOUSLY USING WHILE LOOP BUT AS IN THE QUESTION IT IS GIVEN THAT ALL THE ELEMENTS ARE UNIQUE SO USE MAP INSTAEAD OF 
LOOP IT WILL WORK IN O(1) TIME..
SO OVERALL TC: O(N) 
           SC: O(N) 

CODE:

class Solution {
public:
    
    TreeNode* solve(int prestart, int poststart, int preend,
                           vector<int>& preorder,   vector<int>& postorder)
    {
        if(prestart>preend)
         return NULL;

        TreeNode* root=new TreeNode(preorder[prestart]) ;

        if(prestart==preend)
         return root;

        int nextNode=preorder[prestart+1];

        int j=poststart;

        while(postorder[j] != nextNode) 
          j++;

        int num=j-poststart+1;

        root->left=solve(prestart+1, poststart, prestart+num, preorder, postorder);
        root->right=solve(prestart+num+1, j+1, preend, preorder, postorder);

        return root;  
    }                       
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {

        int n=preorder.size();

        return solve(0, 0, n-1, preorder, postorder); 
    }
};
