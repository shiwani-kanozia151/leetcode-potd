1718. Construct the Lexicographically Largest Valid Sequence

Given an integer n, find a sequence that satisfies all of the following:
The integer 1 occurs once in the sequence.
Each integer between 2 and n occurs twice in the sequence.
For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.
Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.
A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

Example 1:
Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence

Example 2:
Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]
 

Constraints:

1 <= n <= 20

TC: O(n!)
SC: O(n) 
FEW OBSERVATIONS:

1. 2*n-1
2. used -->set, vector<bool>used(n+1, false);
3. Apart from 1, (2 to n) i=_ j= i+nums[i]
4. for any index i will try to put the largest no., if not possible move to next largest number and so on.
5. here we see that we have options, exploring the options(Recursion + Backtracking)   
6. if nums[i] having already some value then move ahead ..


//see pehle rakh rhe hai fir use hta k kisi aur ko rakh k dekh rhe hai that is sare possibilites ko try krte hai..

//format kaisa hota hai iska 
// TRY, EXPLORE -> TRUE OR FALSE, UNDO

CODE: 
class Solution {
public:
    bool solve(int i, int n, vector<int>&res, vector<bool>&used)
    {
        if(i>=res.size()) //guaranteed answer ..
         return true;

        if(res[i] != -1)
         return solve(i+1, n, res, used);

        for(int num=n; num>=1; num--)
        {
            if(used[num])
              continue;
            
            //TRY...
            used[num]=true;
            res[i]=num;

            if(num==1)
            {
                if(solve(i+1, n, res, used)==true)
                 return true;
            }
            else
            {
                int j=res[i]+i;

                if(j<res.size() && res[j]==-1)
                {
                    res[j]=num;
                    if(solve(i+1, n, res, used)==true)
                     return true;

                    res[j]=-1; 
                }
            }

            //UNDO...
            res[i]=-1;
            used[num]=false;
        }  

        return false;
    }
    vector<int> constructDistancedSequence(int n) {
        
        vector<int>res(2*n-1, -1);
        vector<bool>used(n+1, false);

        solve(0, n, res, used);
        return res;
    }
};
