
1352. Product of the Last K Numbers

Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.
Implement the ProductOfNumbers class:
ProductOfNumbers() Initializes the object with an empty stream.
void add(int num) Appends the integer num to the stream.
int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers.
The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.

 

Example:

Input
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Output
[null,null,null,null,null,null,20,40,0,null,32]

Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
 

Constraints:

0 <= num <= 100
1 <= k <= 4 * 104
At most 4 * 104 calls will be made to add and getProduct.
The product of the stream at any point in time will fit in a 32-bit integer.
 

Follow-up: Can you implement both GetProduct and Add to work in O(1) time complexity instead of O(k) time complexity?


CODE: 
//Brute Force approach:

class ProductOfNumbers {
public:
    vector<int>nums;
    int n;
    ProductOfNumbers() {
        nums.clear();
        n=0;
    }
    
    void add(int num) {                //TC: O(1)
        nums.push_back(num); 
    }
    
    int getProduct(int k) {           //TC: O(k)
        int n=nums.size();
        int product=1;

        for(int i=n-k; i<n; i++)        //overall time complexity:O(k)..
        {
            product = product*nums[i];
        }

        return product;

    }
};


//OPTIMAL APPRAOCH WHERE THE GETPRODUCT IS ALSO DONE IN O(1) TIME COMPLEXITY MAKING OVERALLL TC-O(1)..

class ProductOfNumbers {
public:
    vector<int>nums;
    int n;
    ProductOfNumbers() {
        nums.clear();
        n=0;
    }
    
    void add(int num) {
        //nums.push_back(num); 

        if(num==0) // agr nums 0 ho jaega toh aage vale sabhi ko zero kr dega but agr input me [2,3,4,0,6,7,8] then k=2 bola hoga toh agr 
        {           // nums k sare elemnt ko nhi nikalenge toh ans  me 0 aa jaega isliye hum utne tk k elemetns ko nikal k array ko empty kr dete hai .. 
            nums={}; 
            n=0;
        }
        else
        {
            if(nums.size()==0) // agr koi element nhi hai toh sidha dal do ..
                nums.push_back(num);
            else 
                nums.push_back(nums[n-1]*num);//agr koi element hai toh pichla vale ko abhi vale ko multiply krke dal do..

            n++; 
        }    
    }
    
    int getProduct(int k) {
        if(n<k)  // this case is happening because here if 0 is coming then we r decreasing the size of the array to 0 thats why sometimes the vlaue of array will be less then k.
         return 0;
        if(n==k) // if n==k then we r returning the last element of the array as if we do n-k-1 then we will get negative index which will give error.. 
         return nums[n-1];

        return nums[n-1]/nums[n-k-1]; // as we storing the elements in the array like prefix array but here multiplication type me krke kr rhe hai 

    }
};
