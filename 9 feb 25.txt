//  leetoce potd 

//DATE: 9 FEBRUARY 2025

2364. Count Number of Bad Pairs

You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].

Return the total number of bad pairs in nums.

Example 1:

Input: nums = [4,1,3,3]
Output: 5
Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.
The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.
The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.
The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.
The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.
There are a total of 5 bad pairs, so we return 5.


solution:

1. BRUTE FORCE APPROACH 
  //simply go ahead as it is given in the problem statement. use 2 for loops and do as it is mention in the problem statement.
  
     for(int i=0; i<n; i++)
	 {
        for(int j=i+1; j<n; j++)  // here starts j with i+1 as we need i<j.. 
        {
            if(j-i != nums[j]-nums[i])
                count++;

        } 				
	}


2. OPTIMIZED APPROACH USING THE CONCEPT OF MAPS ...

  // HERE WE HAVE CHANGE THE PROBLEM STATEMENT LITTLE BIT LIKE JUST ONLY MODIFY THE STATEMENT.. 
  //   j-i != nums[j]-nums[i] ---> GIVEN
  //   nums[i]-i != nums[j]-j --->modified  here we see that the number itself needs to be subtracted from its index...
  
  [4, 1, 3, 3] -->[4, 0, 1, 0]
  
  so in this case we will make a map and stores the how the count of each element and while traversing if we had previously got that number then we need
  to subtract the count of that number ..

  // [4, 0, 1, 0]
 // when i=0 , map  4-->0 , count = index - map[nums[i]] --> 0-0=0,  after executing map  4-->1,;
 // when i=1,  map  0-->0,  count = index - map[nums[i]] --> 1-0=1 --> 0+1=1,  after executing map  0-->1;
 // when i=2, map  1-->0,  count =  index - map[nums[i]] --> 2-0=2 -->1+2=3,  after executing map 1-->1;
 // when i=3, map 0-->1,  count = index - map[nums[i]] --> 3-1=2 -->3+2=5, after executing map 0 -->2;
  
 // the final value of count is 5 so return it..
  
  
        int n=nums.size();
        for(int i=0; i<n; i++)
        {
            nums[i]=nums[i]-i;
        }

        unordered_map<int, int>mp;
         long long count=0;

         for(int i=0; i<n; i++)
         {
             count = count+(i-mp[nums[i]]);
             mp[nums[i]]++; 
         } 

         return count;