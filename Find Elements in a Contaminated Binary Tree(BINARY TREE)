1261. Find Elements in a Contaminated Binary Tree

https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/description/?envType=daily-question&envId=2025-02-21

Given a binary tree with the following rules:

root.val == 0
For any treeNode:
If treeNode.val has a value x and treeNode.left != null, then treeNode.left.val == 2 * x + 1
If treeNode.val has a value x and treeNode.right != null, then treeNode.right.val == 2 * x + 2
Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.

Implement the FindElements class:

FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it.
bool find(int target) Returns true if the target value exists in the recovered binary tree.
 

Example 1:
Input
["FindElements","find","find"]
[[[-1,null,-1]],[1],[2]]
Output
[null,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1]); 
findElements.find(1); // return False 
findElements.find(2); // return True 

Example 2:
Input
["FindElements","find","find","find"]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
Output
[null,true,true,false]
Explanation
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return True
findElements.find(3); // return True
findElements.find(5); // return False

Example 3:
Input
["FindElements","find","find","find","find"]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
Output
[null,true,false,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return True
findElements.find(3); // return False
findElements.find(4); // return False
findElements.find(5); // return True
 

Constraints:

TreeNode.val == -1
The height of the binary tree is less than or equal to 20
The total number of nodes is between [1, 10^4]
Total calls of find() is between [1, 10^4]
0 <= target <= 10^6

APPROACH: 
by reading it once i was not able to get whats the problem is but when i saw the video then i again read the statement and at that i was first trying to do it 
with simple traversal then i came to know that the simple traversal wont work so the level order traversal came in mind so i try with that and then by doing this 
and after i came to know that while storing the node in the queue we need to store the distance also that we are calculatin while moving to left and while moving to 
right. 


CODE:
class FindElements {
public:

    unordered_map<int, int>mp;

    FindElements(TreeNode* root) {
       queue<pair<TreeNode*, int>>q;

       q.push({root, 0});

       while(!q.empty())
       {
           auto temp=q.front();
           q.pop();

           int x=temp.second;
              mp[x]++;

           if(temp.first->left)
             q.push({temp.first->left, 2*x+1});

           if(temp.first->right)
             q.push({temp.first->right, 2*x+2}); 
       }
        
    }
    
    bool find(int target) {
         
         if(mp.find(target) != mp.end())
            return true;

         return false;   
    }
};
