2551. Put Marbles in Bags

https://leetcode.com/problems/put-marbles-in-bags/description/?envType=daily-question&envId=2025-03-31

You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.
Divide the marbles into the k bags according to the following rules:
No bag is empty.
If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].
The score after distributing the marbles is the sum of the costs of all the k bags.

Return the difference between the maximum and minimum scores among marble distributions.

Example 1:
Input: weights = [1,3,5,1], k = 2
Output: 4
Explanation: 
The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. 
The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. 
Thus, we return their difference 10 - 6 = 4.

Example 2:
Input: weights = [1, 3], k = 2
Output: 0
Explanation: The only distribution possible is [1],[3]. 
Since both the maximal and minimal score are the same, we return 0.
 
Constraints:

1 <= k <= weights.length <= 10^5
1 <= weights[i] <= 10^9

APPROACH: 
THIS THE STANDARD PROBLEM FOR 
https://leetcode.com/problems/find-the-value-of-the-partition/description/
https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/description/
https://leetcode.com/problems/array-partition/description/

Basically in this ques i was not able to get the exact approach how to go i was not able to understand the approach properly..
here i am making a temp array which is basically storing the adjacent element sum and after that we will sort the temp array and we will take minsum from first k-1 
elements and maxsum by last k-1 elements and at last return the difference of both.


CODE:
class Solution {
public:
    long long putMarbles(vector<int>& weights, int k) {
        vector<int>temp;
        
        
        for(int i=0; i<weights.size()-1; i++)
        {
            temp.push_back(weights[i]+weights[i+1]);
        }

        int x=k-1;

        sort(temp.begin(), temp.end());

        long long maxi=0, mini=0;
        int n=temp.size();
        for(int i=0; i<x; i++)
        {
            mini += temp[i];
            maxi += temp[n-i-1];
        }

        return maxi-mini;
    }
};



2740. Find the Value of the Partition

You are given a positive integer array nums.
Partition nums into two arrays, nums1 and nums2, such that:
Each element of the array nums belongs to either the array nums1 or the array nums2.
Both arrays are non-empty.
The value of the partition is minimized.
The value of the partition is |max(nums1) - min(nums2)|.

Here, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.

Return the integer denoting the value of such partition. 

Example 1:
Input: nums = [1,3,2,4]
Output: 1
Explanation: We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].
- The maximum element of the array nums1 is equal to 2.
- The minimum element of the array nums2 is equal to 3.
The value of the partition is |2 - 3| = 1. 
It can be proven that 1 is the minimum value out of all partitions.

Example 2:
Input: nums = [100,1,10]
Output: 9
Explanation: We can partition the array nums into nums1 = [10] and nums2 = [100,1].
- The maximum element of the array nums1 is equal to 10.
- The minimum element of the array nums2 is equal to 1.
The value of the partition is |10 - 1| = 9.
It can be proven that 9 is the minimum value out of all partitions.
 
Constraints:

2 <= nums.length <= 10^5
1 <= nums[i] <= 10^9


APPROACH:
i just took the help from the hint and in the hint it was mention like first sort the array elements and  then traverse the array and find the min(ans, arr[i+1]-arr[i]);
and return ans at last..

CODE:
lass Solution {
public:
    int findValueOfPartition(vector<int>& nums) {
        
        sort(nums.begin(), nums.end());
        int n=nums.size();
        
        int ans = INT_MAX;
        for(int i=0; i<n-1; i++)
        {
            ans = min(ans, nums[i+1]-nums[i]);
        }

        return ans;
    }
};
