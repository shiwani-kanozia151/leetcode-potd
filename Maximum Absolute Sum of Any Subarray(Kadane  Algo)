1749. Maximum Absolute Sum of Any Subarray

https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray/description/?envType=daily-question&envId=2025-02-26

You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.
 
Example 1:
Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.

Example 2:
Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.
 

Constraints:
1 <= nums.length <= 10^5
-104 <= nums[i] <= 10^4

APPROACH:

here by watching the problem i have no idea how to proceed with this problem so i saw the video of code story with mik through which i came to know that to solve
this proble we need to know about the KADANE ALGO so here basically we are using the concept that the find the maximum sum subarray and minimum sum subaray and find 
the max of abs value of both so likewise we have to do. see if we try to take any elemnt from the subarray of minimum then it will be always make the sum less that why 
we are using that approach..

CODE:

class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        //FINDING BOTH MAXIMUM SUBARRAY SUM AS WELL AS MINIMUM SUBARRAY AND THEN FINDING THE ABS VALUE OF BOTH..
 
       //USING KADANE ALGO TO FIND THE MAXIMUM AND MINIMUM SUBARRAY SUM..

       int maxsum=INT_MIN;
       int n=nums.size(), sum=0;
       for(int i=0; i<n; i++)
       {
           sum = max(sum+nums[i], nums[i]);   
           maxsum = max(maxsum, sum);
       }

       int minsum=INT_MAX;
        sum=0;
       for(int i=0; i<n; i++)
       {
          sum = min(sum+nums[i], nums[i]);
          minsum=min(minsum, sum);

       }

       return max(abs(minsum), abs(maxsum));

    }
};
